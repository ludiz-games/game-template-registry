{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "true-false-component",
  "type": "registry:component",
  "title": "True/False Buttons",
  "description": "Focused True/False selection buttons. Handles only the button interaction - no timer, title, or submission logic.",
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/ludiz/true-false-component/true-false-component.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { useState } from \"react\";\n\ninterface TrueFalseComponentProps {\n  correctAnswer?: boolean;\n  selectedAnswer?: boolean | null;\n  onAnswerSelect?: (answer: boolean) => void;\n  showFeedback?: boolean;\n  disabled?: boolean;\n}\n\nexport function TrueFalseComponent({\n  correctAnswer,\n  selectedAnswer,\n  onAnswerSelect,\n  showFeedback = false,\n  disabled = false,\n}: TrueFalseComponentProps) {\n  const [internalSelected, setInternalSelected] = useState<boolean | null>(\n    null\n  );\n\n  // Use controlled or uncontrolled pattern\n  const currentSelected =\n    selectedAnswer !== undefined ? selectedAnswer : internalSelected;\n\n  const handleAnswerSelect = (answer: boolean) => {\n    if (disabled) return;\n\n    if (selectedAnswer === undefined) {\n      setInternalSelected(answer);\n    }\n    onAnswerSelect?.(answer);\n  };\n\n  const getButtonStyle = (value: boolean) => {\n    const baseStyle =\n      \"flex-1 h-20 text-lg font-medium transition-all duration-200\";\n\n    if (disabled && showFeedback && correctAnswer !== undefined) {\n      if (value === correctAnswer) {\n        return `${baseStyle} bg-green-500 text-white border-2 border-green-500`;\n      } else if (currentSelected === value && value !== correctAnswer) {\n        return `${baseStyle} bg-red-500 text-white border-2 border-red-500`;\n      }\n      return `${baseStyle} bg-gray-100 dark:bg-gray-800 border-2 border-gray-200 dark:border-gray-700 opacity-60`;\n    }\n\n    if (currentSelected === value) {\n      return `${baseStyle} bg-blue-500 hover:bg-blue-600 text-white border-2 border-blue-500`;\n    }\n\n    return `${baseStyle} bg-white dark:bg-gray-800 border-2 border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600`;\n  };\n\n  return (\n    <div className=\"flex gap-4\">\n      <Button\n        variant=\"outline\"\n        className={getButtonStyle(true)}\n        onClick={() => handleAnswerSelect(true)}\n        disabled={disabled}\n      >\n        <div className=\"flex flex-col items-center space-y-2\">\n          <div className=\"text-2xl\">✓</div>\n          <div>TRUE</div>\n          {showFeedback && disabled && correctAnswer === true && (\n            <div className=\"text-sm opacity-75\">Correct!</div>\n          )}\n          {showFeedback &&\n            disabled &&\n            currentSelected === true &&\n            correctAnswer === false && (\n              <div className=\"text-sm opacity-75\">Incorrect</div>\n            )}\n        </div>\n      </Button>\n\n      <Button\n        variant=\"outline\"\n        className={getButtonStyle(false)}\n        onClick={() => handleAnswerSelect(false)}\n        disabled={disabled}\n      >\n        <div className=\"flex flex-col items-center space-y-2\">\n          <div className=\"text-2xl\">✗</div>\n          <div>FALSE</div>\n          {showFeedback && disabled && correctAnswer === false && (\n            <div className=\"text-sm opacity-75\">Correct!</div>\n          )}\n          {showFeedback &&\n            disabled &&\n            currentSelected === false &&\n            correctAnswer === true && (\n              <div className=\"text-sm opacity-75\">Incorrect</div>\n            )}\n        </div>\n      </Button>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}