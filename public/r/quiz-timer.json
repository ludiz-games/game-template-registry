{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "quiz-timer",
  "type": "registry:component",
  "title": "Quiz Timer",
  "description": "Reusable timer component with progress bar and warning states for timed activities",
  "registryDependencies": [
    "card"
  ],
  "files": [
    {
      "path": "registry/ludiz/quiz-timer/quiz-timer.tsx",
      "content": "\"use client\";\n\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useEffect, useState } from \"react\";\n\ninterface QuizTimerProps {\n  totalTime: number; // in seconds\n  onTimeUp?: () => void;\n  onTick?: (timeRemaining: number) => void;\n  isActive?: boolean;\n  showProgress?: boolean;\n  warningThreshold?: number; // seconds when to show warning (default: 10)\n  size?: \"sm\" | \"md\" | \"lg\";\n}\n\nexport function QuizTimer({\n  totalTime,\n  onTimeUp,\n  onTick,\n  isActive = true,\n  showProgress = true,\n  warningThreshold = 10,\n  size = \"md\",\n}: QuizTimerProps) {\n  const [timeRemaining, setTimeRemaining] = useState(totalTime);\n  const [isExpired, setIsExpired] = useState(false);\n\n  useEffect(() => {\n    setTimeRemaining(totalTime);\n    setIsExpired(false);\n  }, [totalTime]);\n\n  useEffect(() => {\n    if (!isActive || isExpired || timeRemaining <= 0) return;\n\n    const timer = setInterval(() => {\n      setTimeRemaining((prev) => {\n        const newTime = prev - 1;\n        onTick?.(newTime);\n\n        if (newTime <= 0) {\n          setIsExpired(true);\n          onTimeUp?.();\n          return 0;\n        }\n\n        return newTime;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [isActive, isExpired, timeRemaining, onTick, onTimeUp]);\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, \"0\")}`;\n  };\n\n  const getProgressPercentage = () => {\n    return ((totalTime - timeRemaining) / totalTime) * 100;\n  };\n\n  const isWarning = timeRemaining <= warningThreshold && timeRemaining > 0;\n  const isExpiredState = timeRemaining <= 0;\n\n  const getSizeClasses = () => {\n    switch (size) {\n      case \"sm\":\n        return {\n          container: \"px-2 py-1\",\n          text: \"text-sm\",\n          progress: \"h-1\",\n        };\n      case \"lg\":\n        return {\n          container: \"px-4 py-3\",\n          text: \"text-xl font-bold\",\n          progress: \"h-3\",\n        };\n      default:\n        return {\n          container: \"px-3 py-2\",\n          text: \"text-base font-medium\",\n          progress: \"h-2\",\n        };\n    }\n  };\n\n  const sizeClasses = getSizeClasses();\n\n  const getTimerStyle = () => {\n    if (isExpiredState) {\n      return \"bg-red-100 text-red-700 border-red-200 dark:bg-red-900/20 dark:text-red-300 dark:border-red-800\";\n    } else if (isWarning) {\n      return \"bg-orange-100 text-orange-700 border-orange-200 dark:bg-orange-900/20 dark:text-orange-300 dark:border-orange-800\";\n    } else {\n      return \"bg-gray-100 text-gray-700 border-gray-200 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-700\";\n    }\n  };\n\n  const getProgressBarColor = () => {\n    if (isExpiredState) {\n      return \"bg-red-500\";\n    } else if (isWarning) {\n      return \"bg-orange-500\";\n    } else {\n      return \"bg-blue-500\";\n    }\n  };\n\n  return (\n    <Card className={`${getTimerStyle()} transition-colors duration-300`}>\n      <CardContent className={`${sizeClasses.container} space-y-2`}>\n        <div className=\"flex items-center justify-between\">\n          <div className={`font-mono ${sizeClasses.text}`}>\n            {formatTime(timeRemaining)}\n          </div>\n          {isExpiredState && (\n            <div className=\"text-sm font-medium\">Time's Up!</div>\n          )}\n          {isWarning && !isExpiredState && (\n            <div className=\"text-sm font-medium animate-pulse\">⚠️ Hurry!</div>\n          )}\n        </div>\n\n        {showProgress && (\n          <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden\">\n            <div\n              className={`${sizeClasses.progress} ${getProgressBarColor()} transition-all duration-1000 ease-out`}\n              style={{ width: `${getProgressPercentage()}%` }}\n            />\n          </div>\n        )}\n\n        {size === \"lg\" && (\n          <div className=\"text-xs text-center opacity-75\">\n            {isExpiredState\n              ? \"Time expired\"\n              : `${Math.round(getProgressPercentage())}% elapsed`}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}