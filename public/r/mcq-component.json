{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "mcq-component",
  "type": "registry:component",
  "title": "MCQ Choices",
  "description": "Ultra-focused multiple choice selection component. Only handles choice display and selection - no timer, title, or submit logic.",
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/ludiz/mcq-component/mcq-component.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\n\ninterface MCQChoice {\n  id: string;\n  text: string;\n  isCorrect: boolean;\n}\n\ninterface MCQComponentProps {\n  choices: MCQChoice[];\n  selectedChoice?: string | null;\n  onChoiceSelect?: (choiceId: string) => void;\n  showFeedback?: boolean;\n  disabled?: boolean;\n}\n\nexport function MCQComponent({\n  choices,\n  selectedChoice = null,\n  onChoiceSelect,\n  showFeedback = false,\n  disabled = false,\n}: MCQComponentProps) {\n  const [internalSelected, setInternalSelected] = useState<string | null>(null);\n\n  // Use controlled or uncontrolled pattern\n  const currentSelected =\n    selectedChoice !== undefined ? selectedChoice : internalSelected;\n\n  const handleChoiceSelect = (choiceId: string) => {\n    if (disabled) return;\n\n    if (selectedChoice === undefined) {\n      setInternalSelected(choiceId);\n    }\n    onChoiceSelect?.(choiceId);\n  };\n\n  const getChoiceStyle = (choice: MCQChoice) => {\n    const baseStyle =\n      \"p-4 border rounded-lg cursor-pointer transition-all duration-200 text-left\";\n\n    if (disabled) {\n      if (showFeedback) {\n        if (choice.isCorrect) {\n          return `${baseStyle} border-green-500 bg-green-50 dark:bg-green-900/20 text-green-800 dark:text-green-200 cursor-default`;\n        } else if (currentSelected === choice.id && !choice.isCorrect) {\n          return `${baseStyle} border-red-500 bg-red-50 dark:bg-red-900/20 text-red-800 dark:text-red-200 cursor-default`;\n        }\n      }\n      return `${baseStyle} border-gray-200 dark:border-gray-700 opacity-60 cursor-default`;\n    }\n\n    return `${baseStyle} ${\n      currentSelected === choice.id\n        ? \"border-blue-500 bg-blue-50 dark:bg-blue-900/20\"\n        : \"border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600\"\n    }`;\n  };\n\n  return (\n    <div className=\"space-y-3\">\n      {choices.map((choice, index) => (\n        <div\n          key={choice.id}\n          className={getChoiceStyle(choice)}\n          onClick={() => handleChoiceSelect(choice.id)}\n        >\n          <div className=\"flex items-start space-x-3\">\n            <div\n              className={`flex-shrink-0 w-6 h-6 rounded-full border-2 flex items-center justify-center text-sm font-medium ${\n                currentSelected === choice.id\n                  ? \"border-blue-500 bg-blue-500 text-white\"\n                  : \"border-gray-300 dark:border-gray-600\"\n              }`}\n            >\n              {String.fromCharCode(65 + index)}\n            </div>\n            <div className=\"flex-1\">{choice.text}</div>\n            {showFeedback && disabled && choice.isCorrect && (\n              <div className=\"text-green-600 dark:text-green-400\">✓</div>\n            )}\n            {showFeedback &&\n              disabled &&\n              currentSelected === choice.id &&\n              !choice.isCorrect && (\n                <div className=\"text-red-600 dark:text-red-400\">✗</div>\n              )}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}